@using FinanceBlazor.Enum
@using FinanceBlazor.Model
@using FinanceBlazor.Service
@inject DialogService DialogService
@inject TransactionService TransactionService
@inject NotificationService NotificationService

<EditForm Model="@transaction" OnValidSubmit="SaveTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="flex items-center justify-center flex-col gap-4">
        <RadzenFormField Text="Nome" Variant="Variant.Outlined" Style="width: 100%;"> 
            <RadzenTextBox @bind-Value="@transaction.Name" />
            <ValidationMessage For="@(() => transaction.Name)" />
        </RadzenFormField>



        <RadzenNumeric 
            TValue="decimal" 
            Format="c" 
            @bind-Value="@transaction.Price" 
            InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "enter value" }})" 
            Style="width: 100%;"
        />
        <ValidationMessage For="@(() => transaction.Price)" />

        <div class="flex items-center justify-center w-full gap-2">
            <button type="button" 
                class="py-4 px-2 flex items-center justify-center rounded-md border gap-2 w-full
                       @(transaction.Type == TypeTransaction.Income ? "bg-mygreen text-white font-bold" : "bg-gray-100")"
                @onclick="() => transaction.Type = TypeTransaction.Income">
                <i class="fa-solid fa-circle-arrow-up @(transaction.Type == TypeTransaction.Income ? "text-white" : "text-green-500") text-2xl"></i>
                Entrada
            </button>

            <button type="button"
                class="py-4 px-2 flex items-center justify-center rounded-md border gap-2 w-full
                       @(transaction.Type == TypeTransaction.Expense ? "bg-myred text-white font-bold" : "bg-gray-100")"
                @onclick="() => transaction.Type = TypeTransaction.Expense">
                <i class="fa-solid fa-circle-arrow-down @(transaction.Type == TypeTransaction.Expense ? "text-white" : "text-red-500") text-2xl"></i>
                Saída
            </button>
        </div>

        <RadzenFormField Text="Categoria" Variant="Variant.Outlined" Style="width: 100%;">
            <RadzenTextBox @bind-Value="@transaction.Category" />
        </RadzenFormField>
        
        <button type="submit" 
            class="flex items-center justify-center @(transaction.Type == TypeTransaction.Income ? "bg-mygreen" : "bg-myred") text-white font-bold font-2xl w-full p-4 rounded-md border">
            Cadastrar
        </button>
    </div>
</EditForm>

@code {
    private ModelTransaction transaction = new ModelTransaction();

    protected override void OnInitialized()
    {
        transaction = new ModelTransaction();
    }

    private async Task SaveTransaction()
    {
        try 
        {
            var createdTransaction = TransactionService.CreateTransaction(transaction);

      
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Success, 
                Summary = "Sucesso", 
                Detail = "Transação cadastrada com sucesso!" 
            });

         
            DialogService.Close(createdTransaction);

           
            transaction = new ModelTransaction();
        }
        catch (Exception ex)
        {
            NotificationService.Notify(new NotificationMessage 
            { 
                Severity = NotificationSeverity.Error, 
                Summary = "Erro", 
                Detail = $"Erro ao cadastrar transação: {ex.Message}" 
            });
        }
    }
}